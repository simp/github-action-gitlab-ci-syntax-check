# Validates a `.gitlab-ci.yml` file against a GitLab service's CI Linter API
#
# ------------------------------------------------------------------------------
#
# NOTES:
#
# The CI lint returns an expanded version of the configuration. The expansion
# does not work for CI configuration added with `include: local`, or with
# `extends:`.
#
---
name: 'Gitlab CI Syntax Check'
description: "Validate a `.gitlab-ci.yml` file against a GitLab service's CI Linter API."
author: 'SIMP Team'
inputs:
  gitlab_api_url:
    description: 'Specify a GitLab API other than gitlab.com'
    required: true
      #efault: 'https://gitlab.com/api/v4/projects/${{ github.event.organization.login }}%2F${{ github.event.repository.name }}'
  gitlab_api_private_token:
    description: 'GitLab API private token (might help with rate-limiting?)'
    required: true
outputs:
  valid:
    description: 'Returns `"true"` if the `.gitlab-ci.yml` is valid'
    value: ${{ steps.validate-glci-file.outputs.valid }}

branding:
  icon: gitlab
  color: green

runs:
  using: "composite"
  steps:
    - name: 'Does GLCI file exist?'
      id: glci-file-exists
      shell: bash
      run: |
        if [ -f .gitlab-ci.yml ]; then
          echo '.gitlab-ci.yml exists'
          echo 'name=exists::true' >> "$GITHUB_OUTPUT"
        else
          echo '::error ::The ".gitlab-ci.yml" file is missing!'
          echo 'name=exists::false' >> "$GITHUB_OUTPUT"
          false
        fi

    - name: 'Examine Context contents'
      if: always()
      shell: bash
      env:
        THING: ${{ github.event.repository.name }}
        ORG: ${{ github.event.organization.login }}
        GITHUB_CONTEXT: ${{ toJson(github) }}
        INPUTS_CONTEXT: ${{ toJson(inputs) }}
      run: |
        echo "$GITHUB_CONTEXT"
        echo "$INPUTS_CONTEXT"
        env | sort
    - name api_input_is_empty:
      shell: bash
      if: inputs.gitlab_api_private_token == ''
      run: echo aaaaaagh

    - api_url_is_empty:
      shell: bash
      if: inputs.gitlab_api_url == ''
      run: echo aaaaaagh

    - name: 'Validate GLCI file syntax'
      id: validate-glci-file
      env:
        GITLAB_API_URL: ${{ inputs.gitlab_api_url }}
        GITLAB_API_PRIVATE_TOKEN: ${{ inputs.gitlab_api_private_token }}
        CA_BUNDLE_PATH: '${{ github.action_path }}/ca-bundle.crt'
      shell: bash
      run: |
        echo -n 'Test length of API token:'
        echo "$GITLAB_API_PRIVATE_TOKEN" | wc -c


        echo -n 'Test length of API url:'
        echo "GITLAB_API_URL" | wc -c

        GITLAB_API_URL="${GITLAB_API_URL:-missing--gitlab-api-url}"
        CURL_CMD=(curl --header "PRIVATE-KEY: $GITLAB_API_PRIVATE_TOKEN"  --capath /dev/null --cacert "$CA_BUNDLE_PATH" --http1.1 --fail --verbose --show-error --header 'Content-Type: application/json' --data @-)
        data="$(jq --null-input --arg yaml "$(<.gitlab-ci.yml)" '.content=$yaml' )"
        echo "$data" | sha256sum
        response="$(echo "$data" | "${CURL_CMD[@]}" "${GITLAB_API_URL}/ci/lint" | jq . )"
        valid=$( echo "$response" | jq .valid )
        if [[ $valid  == 'true' ]]; then
          echo '.gitlab-ci.yml is valid'
          echo 'name=valid::true' >> "$GITHUB_OUTPUT"
        else
          echo 'name=valid::false' >> "$GITHUB_OUTPUT"
          echo '::error::The .gitlab-ci.yml" file is invalid!'
          echo "$response" | jq -r '.errors[] | . = "::error ::\(.)"'
          printf  "::debug ::.gitlab-ci.yml CI lint service response: %s\n" "$response"
          false
        fi
